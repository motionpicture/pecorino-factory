/**
 * 支払取引ファクトリー
 */

import * as MoneyTransferActionFactory from '../action/transfer/moneyTransfer';
import { IExtendId } from '../autoGenerated';
import { IClientUser } from '../clientUser';
import OrganizationType from '../organizationType';
import PersonType from '../personType';
import * as TransactionFactory from '../transaction';
import TransactionType from '../transactionType';

/**
 * 取引開始パラメーターインターフェース
 */
export type IStartParams = TransactionFactory.IStartParams<TransactionType.Withdraw, IAgent, IRecipient, IObject>;

export interface IRecipient {
    typeOf: OrganizationType | PersonType;
    id?: string;
    name: string;
    url?: string;
}

export interface IAgent {
    typeOf: OrganizationType | PersonType;
    id?: string;
    name: string;
    url?: string;
}

export type IResult = any;

/**
 * error interface
 * エラーインターフェース
 */
export type IError = any;

/**
 * object of a transaction interface
 * 取引対象物インターフェース
 */
export interface IObject {
    clientUser: IClientUser;
    amount: number;
    fromAccountNumber: string;
    notes: string;
}

export interface IPotentialActions {
    moneyTransfer: MoneyTransferActionFactory.IAttributes;
}

export type ITransaction = IExtendId<IAttributes>;

/**
 * 支払取引インターフェース
 */
export interface IAttributes extends TransactionFactory.IAttributes<IStartParams, IResult, IError, IPotentialActions> {
}
